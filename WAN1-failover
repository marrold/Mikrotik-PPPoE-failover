local iface "WAN1 - Plusnet VDSL"
local eface "06 - Plusnet VDSL"
local intdown
local CurrentIP
global previntstatWAN1
local ping1 208.67.220.220
local ping2 8.8.4.4

if ([:typeof $previntstatWAN1] = "nothing") do={
   :set previntstatWAN1 "up"
   } 

:do {
  :set CurrentIP [ /ip address get [find interface=$iface disabled=no] address ]
  :for i from=( [:len $CurrentIP] - 1) to=0 do={
    :if ( [:pick $CurrentIP $i] = "/") do={ :set CurrentIP [:pick $CurrentIP 0 $i] } 
    }
  :set CurrentIP  [:toip $CurrentIP]

  :if (($CurrentIP in 172.16.0.0/12) or ($CurrentIP in 10.0.0.0/8)) do={
    :set intdown private
    :put "Failover-Monitor: '$iface' interface has been assigned a private IP"
    :log info "Failover-Monitor: '$iface' interface has been assigned a private IP"
    } else={
        :if ([/ping $ping1 interface=$iface count=3 interval=0.5] < 3) do={
          :put "Failover-Monitor: Ping responding on '$iface' for $ping1"
          :log info "Failover-Monitor: Ping responding on '$iface' for $ping1"
          :if ([/ping $ping2 interface=$iface count=3 interval=0.5] < 3) do={
            :put "Failover-Monitor: Ping not responding on '$iface' for $ping2"
            :log info "Failover-Monitor: Ping not responding on '$iface' for ping2"
            :set intdown noping
            :if ([:interface pppoe-client get "$iface" running] = false) do={
              :put "Failover-Monitor: '$iface' PPPoE is not connected"
              :log info "Failover-Monitor: '$iface' PPPoE is not connected"
              :set intdown PPPoEDown
            }
          }
         }
### Insert Interface down section here ###        
      }
} on-error={
    :put "Failover-Monitor: Unable to check IP for '$iface'"
    :log info "Failover-Monitor: Unable to check IP for '$iface'"
    :if ([:interface pppoe-client get "$iface" running] = false) do={
      :put "Failover-Monitor: '$iface' PPPoE is not connected"
      :log info "Failover-Monitor: '$iface' PPPoE is not connected"
      :set intdown PPPoEDown
    :if ([:interface ethernet  get "$eface" running] = false) do={
      :put "Failover-Monitor: '$eface' ethernet is not connected"
      :log info "Failover-Monitor: '$eface' ethernet is not connected"
      :set intdown EthDown
    }
  }

### Actions

:if (($intdown = "EthDown") && ($previntstatWAN1 = "up")) do={
    :put "Failover-Monitor: Ethernet port '$eface' is not connected, adjusting route distances and clearing connections"
    :log info "Failover-Monitor: Ethernet port '$eface' is not connected, adjusting route distances and clearing connections"
    :foreach i in=[/ip route find  where gateway="$iface" static]  do={
        :if (([/ip route get $i routing-mark]!="$[:pick "$iface" 0 4]"."_Inbound") || ([:typeof [/ip route get $i routing-mark]] = "nil")) do={
          :local routedist [/ip route get $i distance]
          :if ($routedist < 10) do={
              /ip route set $i distance=($routedist * 10)
           } else={
               :put "Failover-Monitor: Route distance for $iface is greater than 10, I don't know what to do!"
               :log info "Failover-Monitor: Route distance for $iface is greater than 10, I don't know what to do!"
               }
        }
    }
    :delay 0.5
    :foreach i in=[/ip firewall connection find  where protocol~"udp"]  do={/ip firewall connection remove $i}
    :set previntstatWAN1 down
    :beep length=0.8
}

:if (($intdown = "PPPoEDown") && ($previntstatWAN1 = "up")) do={
    :put "Failover-Monitor: PPPoE session '$iface' is not connected, adjusting route distances and clearing connections"
    :log info "Failover-Monitor: PPPoE session '$iface' is not connected, adjusting route distances and clearing connections"
    :foreach i in=[/ip route find  where gateway="$iface" static]  do={
        :if (([/ip route get $i routing-mark]!="$[:pick "$iface" 0 4]"."_Inbound") || ([:typeof [/ip route get $i routing-mark]] = "nil")) do={
          :local routedist [/ip route get $i distance]
          :if ($routedist < 10) do={
              /ip route set $i distance=($routedist * 10)
           } else={
               :put "Failover-Monitor: Route distance for $iface is greater than 10, I don't know what to do!"
               :log info "Failover-Monitor: Route distance for $iface is greater than 10, I don't know what to do!"
               }
        }
    }
    :delay 0.5
    :foreach i in=[/ip firewall connection find  where protocol~"udp"]  do={/ip firewall connection remove $i}
    :set previntstatWAN1 down
    :beep length=0.8
}

:if (($intdown = "private") && ($previntstatWAN1 != "private")) do={
    :put "Failover-Monitor: '$iface' interface has a private IP address, adjusting route distances and clearing connections"
    :log info "Failover-Monitor: '$iface' interface has a private IP address, adjusting route distances and clearing connections"
    :foreach i in=[/ip route find  where gateway="$iface" static]  do={
        :if (([/ip route get $i routing-mark]!="$[:pick "$iface" 0 4]"."_Inbound") || ([:typeof [/ip route get $i routing-mark]] = "nil")) do={
          :local routedist [/ip route get $i distance]
          :if ($routedist < 10) do={
              /ip route set $i distance=($routedist * 10)
           } else={
               :put "Failover-Monitor: Route distance for $iface is greater than 10, I don't know what to do!"
               :log info "Failover-Monitor: Route distance for $iface is greater than 10, I don't know what to do!"
               }
        }
    }
    :delay 0.5
    :foreach i in=[/ip firewall connection find  where protocol~"udp"]  do={/ip firewall connection remove $i}
    :set previntstatWAN1 private
    :beep length=0.8
}
    
:if (($intdown = "noping") && ($previntstatWAN1 != "noping")) do={
    :put "Failover-Monitor: '$iface' interface is not getting responses to pings from $ping1 & $ping2, adjusting route distances and clearing connections"
    :log info "Failover-Monitor: '$iface' interface is not getting responses to pings from $ping1 & $ping2, adjusting route distances and clearing connections"
    :foreach i in=[/ip route find  where gateway="$iface" static]  do={
        :if (([/ip route get $i routing-mark]!="$[:pick "$iface" 0 4]"."_Inbound") || ([:typeof [/ip route get $i routing-mark]] = "nil")) do={
          :local routedist [/ip route get $i distance]
          :if ($routedist < 10) do={
              /ip route set $i distance=($routedist * 10)
           } else={
               :put "Failover-Monitor: Route distance for $iface is greater than 10, I don't know what to do!"
               :log info "Failover-Monitor: Route distance for $iface is greater than 10, I don't know what to do!"
               }
        }
    }
    :delay 0.5
    :foreach i in=[/ip firewall connection find  where protocol~"udp"]  do={/ip firewall connection remove $i}
    :set previntstatWAN1 noping
    :beep length=0.8
}


:if (($intdown = false) && (($previntstatWAN1 = "down") or ($previntstatWAN1 = "private") or ($previntstatWAN1 = "noping"))) do={
    :put "Failover-Monitor: '$iface' interface has gone up, adjusting route distances and clearing connections"
    :log info "Failover-Monitor: '$iface' interface has gone up, adjusting route distances and clearing connections"
    :foreach i in=[/ip route find  where gateway="$iface" static]  do={
        :if (([/ip route get $i routing-mark]!="$[:pick "$iface" 0 4]"."_Inbound") || ([:typeof [/ip route get $i routing-mark]] = "nil")) do={
          :local routedist [/ip route get $i distance]
          :if ($routedist >= 10) do={
              /ip route set $i distance=($routedist / 10)
           } else={
               :put "Failover-Monitor: Route distance for $iface is less than 10, I don't know what to do!"
               :log info "Failover-Monitor: Route distance for $iface is less than 10, I don't know what to do!"
               }
        }
    }
    :delay 0.5
    :foreach i in=[/ip firewall connection find  where protocol~"udp"]  do={/ip firewall connection remove $i}
    :set previntstatWAN1 up 
    :beep length=0.5
    :delay 1
    :beep length=0.5
}
